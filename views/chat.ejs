<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <link rel="stylesheet" href="assets/styles/index.css">
  <link rel="stylesheet" href="assets/styles/generales.css">
  <link rel="stylesheet" href="assets/styles/menu.css"> 
  <link rel="stylesheet" href="assets/styles/info.css">
  <link rel="stylesheet" href="assets/styles/cards.css">
  <link rel="stylesheet" href="assets/styles/footer.css">  
  <link rel="stylesheet" href="assets/styles/curso_card.css">
  <link rel="stylesheet" href="assets/styles/chat.css">
  
  <title>Inicio</title>
    

</head>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
<script src="./assets/javascript/vermas.js"></script>
<script src="https://kit.fontawesome.com/26fe3ca93f.js" crossorigin="anonymous"></script>

<script src="/socket.io/socket.io.js"></script>

<body>
  <%- include('models/head') %>
    
    <% if (user) { %>
        <script>
            const socket = io();
            let usuarioId = '<%= user._id %>'
            socket.emit('joinRoom', { usuarioId });
            let usuarioRol = '<%= user.rol %>'
        </script>
    <% } %>
  <nav class="navbar bg-body-tertiary fixed-top">
      <div class="container-fluid">
          <div class="offcanvas offcanvas-start" data-bs-backdrop="false" tabindex="-1" id="allMessages" aria-labelledby="">
              <div class="messagesCanvasHeader">
                  <h5 class="messageCanvasTitle" style="color: var(--alice-blue);" id="offcanvasNavbarLabel">Mensajes</h5>
                  <button style="right: 1rem;" type="button" class="btn-close position-absolute" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                  <form class="d-flex mt-3" role="search">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <button class="btn btn-outline-success" type="submit">Search</button>
                  </form>
              </div>
              <div class="offcanvas-body messagesCanvasBody">
                  <ul class="justify-content-end flex-grow-1 pe-3">
                    <% users.forEach(user => { %>
                        <% if (user.rol != 'admin') { %>
                            <li class="user-item" data-user-id="<%= user._id %>">
                                <a class="" aria-current="page" href="#"><%= user.usuario %></a>
                            </li>
                        <% } %>
                      <% }) %>
                  </ul>
              </div>
          </div>
      </div>
  </nav>
  
  <div class="main-container">
    <div class="chat-container">
      <div class="chat-header">
        <% if (user.rol == 'admin') { %>
            <button class="btn btn-link chat__notification-button" type="button" data-bs-toggle="offcanvas" data-bs-target="#allMessages" aria-controls="allMessages" aria-label="Toggle navigation">
            <i class="fa-solid fa-message"></i>
            </button>
        <% } %>
        
        <h3 class="chat-name" id="chatName">
            <% if (user.rol === 'admin') { %>
                ---
            <% } else { %>
                Admin
            <% } %>
        </h3>
      </div>
      
      <div class="chat__messages" id="chat__messages">
        <ul id="messages"></ul>
      </div>
      <form form id="form" action="" class="">
        <input type="hidden" id="userIdInput" name="userId" value="<%= user._id %>">
        <input id="input" autocomplete="off" data-user-id="" />
        <button type="submit">
          <i class="fa-solid fa-paper-plane"></i>
        </button>
      </form>
    </div>
  </div>
  
</body>

<script>
    if (usuarioRol !== 'admin') {
        const obtenerMensajes = async () => {
            try {
                const respuesta = await fetch(`/chat/messages/${usuarioId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (respuesta.status === 201) {
                    return undefined;
                }

                return await respuesta.json();
            } catch (error) {
                console.error('Error al obtener mensajes:', error);
                return undefined;
            }
        };

        obtenerMensajes().then(messages => {
            if (messages === undefined) {
                return;
            }

            const messagesList = document.getElementById('messages');
            messagesList.innerHTML = ''; // Limpiar mensajes anteriores 

            messages.messages.forEach(message => {
                const messageItem = document.createElement('li');
                messageItem.textContent = message.content;

                if (usuarioId === message.sender) {
                    messageItem.classList.add('toRight');
                } else {
                    messageItem.classList.add('toLeft');
                }

                messagesList.appendChild(messageItem);
            });

            const chatMessages = document.getElementById('chat__messages');
            chatMessages.scrollTo(0, chatMessages.scrollHeight);
        });
    }
</script>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const userItems = document.querySelectorAll('.user-item');

    userItems.forEach(item => {
      item.addEventListener('click', async (e) => {
        e.preventDefault();

        
        const offcanvas = bootstrap.Offcanvas.getInstance('#allMessages')
        
        offcanvas.hide();
        
        const userId = item.getAttribute('data-user-id');
        
        if (!userId) return;

        document.getElementById('userIdInput').value = userId;

        // Unirse a una room con el ID del usuari
        socket.emit('leaveRoom', { userId });
            socket.on('leaveRoomConfirmation', () => {
            // El usuario se ha desconectado exitosamente de la sala actual
            console.log("Se desconectó de la sala anterior");

            // Emitir un evento para unirse a la nueva sala
            socket.emit('joinRoom', { userId });

            // Confirmar que el usuario se ha unido a la nueva sala
            console.log("Se ingresó a la nueva sala");
        });

        
        try {
            const userRequest = await fetch(`/chat/${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const userData = await userRequest.json();

            const chatName = document.getElementById('chatName');
            
            chatName.innerHTML = userData.usuario;
            const messagesList = document.getElementById('messages');

            messagesList.innerHTML = ''; // Limpiar mensajes anteriores 
             

        } catch (error) {
          console.error('Error fetching usuario', error);
        }

        try {
            const response = await fetch(`/chat/messages/${userId}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

            
            if (response.status == 201) {
                const messages = undefined;
                return
            }

            const messages = await response.json();

            const messagesList = document.getElementById('messages');
            
            messagesList.innerHTML = ''; // Limpiar mensajes anteriores 

            messages.messages.forEach(message => {
                const messageItem = document.createElement('li');
                messageItem.textContent = message.content;


                if (usuarioId === message.sender) {
                    messageItem.classList.add('toRight');
                } else {
                    messageItem.classList.add('toLeft'); 
                     
                }

                messagesList.appendChild(messageItem);
            });

            const messagesContainer = document.getElementById('messages');
            const chat_messages = document.getElementById('chat__messages');
            chat_messages.scrollTo(0, messagesContainer.scrollHeight);


        } catch (error) {
          console.error('Error fetching messages:', error);
        }
      });
    });
  });

</script>

<script>

    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const inputUserId = document.getElementById('userIdInput');
    const messages = document.getElementById('messages');
    const chat_messages = document.getElementById('chat__messages');
    

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (input.value) {
            socket.emit('chat message', {text: input.value, sender: usuarioId});
            let jsonData = {
                userId: inputUserId.value,
                messageContent: input.value,
                senderId: usuarioId
            }

            input.value = ''; 

            console.log(jsonData)

            try {
            const response = await fetch('/chat/messages', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            });

            console.log(response)
            
            } catch (error) {
                console.log(error)
            }
        
        }        
    });

    

  socket.on('chat message', (msg) => {
    const item = document.createElement('li');
    item.textContent = msg.text;
    if (usuarioId === msg.sender) {
        item.classList.add('toRight');
    } else {
        item.classList.add('toLeft'); 
            
    }
    messages.appendChild(item);
    chat_messages.scrollTo(0, messages.scrollHeight);
    // window.scrollTo(0, document.body.scrollHeight);
  });
</script>

</html>